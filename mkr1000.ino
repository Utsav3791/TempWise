#include "arduino_secrets.h"
// DHT sensor library - Version: Latest 
#include <DHT.h>
#include <DHT_U.h>
#include <WiFi101.h>
#include <ArduinoIoTCloud.h>
#include <Arduino_ConnectionHandler.h>

/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/85c8a531-243e-49e1-878a-2bf654970337 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float max_temp;
  float temperature;
  bool fan_on;
  bool override_fan_control;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

// Include the header file generated by the Arduino IoT Cloud
#include "thingProperties.h"

//Constants
#define DHTPIN 5
#define DHTTYPE DHT22
DHT dht(DHTPIN, DHTTYPE);

#define fan 2
#define default_max_temp  30

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
  
  // Initialize the DHT sensor
  dht.begin();
  
  // Set fan pin as OUTPUT
  pinMode(fan, OUTPUT);
  
  // Initially turn off the fan
  digitalWrite(fan, LOW);

  // Set default max_temp if not provided
  if (isnan(max_temp)) {
    max_temp = default_max_temp;
  }
}

void loop() {
  // Keep the Arduino IoT Cloud connection alive
  ArduinoCloud.update();

  // Read temperature data from the DHT sensor
  temperature = dht.readTemperature();
  Serial.print("Temp: ");
  Serial.print(temperature);
  Serial.println(" Celsius");
  
  // Control fan or regulate temperature based on user input settings
  update_system();
  
  // Delay for 5 seconds
  delay(5000);
}

// Function to regulate the temperature based on max_temp
void regulate_temperature() {
  if (temperature > max_temp) {
    // Turn on the fan
    digitalWrite(fan, HIGH);
    fan_on = true;
  } else {
    // Turn off the fan
    digitalWrite(fan, LOW);
    fan_on = false;
  }
}

// Function to turn the fan on or off based on the fan_on variable
void turn_fan_on_off() {
  if (fan_on) {
    digitalWrite(fan, HIGH);
  } else {
    digitalWrite(fan, LOW);
  }
}

// Update the system based on override_fan_control flag
void update_system() {
  if (override_fan_control) {
    turn_fan_on_off();
  } else {
    regulate_temperature();
  }
}

// Callback function when max_temp changes
void onMaxTempChange() {
  regulate_temperature();
}

// Callback function when override_fan_control changes
void onOverrideFanControlChange() {
  update_system();
}

// Callback function when fan_on changes
void onFanOnChange() {
  update_system();
}
